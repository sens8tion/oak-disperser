import type { Request, Response } from 'express';import { PubSub } from '@google-cloud/pubsub';import { getConfig } from './config';import { authenticateRequest } from './auth';import { ingestPayloadSchema } from './schema';const config = getConfig();const pubsub = new PubSub(config.projectId ? { projectId: config.projectId } : undefined);const jsonTopic = () => pubsub.topic(config.pubsubTopic);export const ingest = async (req: Request, res: Response): Promise<void> => {  if (req.method !== 'POST') {    res.setHeader('Allow', 'POST');    res.status(405).json({ error: 'method_not_allowed' });    return;  }  if (!req.is('application/json')) {    res.status(415).json({ error: 'unsupported_media_type' });    return;  }  const auth = await authenticateRequest(req, config);  if (!auth.ok) {    res.status(auth.status).json({ error: auth.message });    return;  }  const parseResult = ingestPayloadSchema.safeParse(req.body);  if (!parseResult.success) {    res.status(400).json({      error: 'invalid_payload',      details: parseResult.error.flatten(),    });    return;  }  const payload = parseResult.data;  const enriched = {    ...payload,    receivedAt: new Date().toISOString(),    requester: auth.subject,  };  try {    const messageId = await jsonTopic().publishMessage({ json: enriched });    res.status(202).json({      status: 'accepted',      messageId,      correlationId: payload.correlationId,    });  } catch (error) {    console.error('publish failed', error);    res.status(500).json({ error: 'publish_failed' });  }};