import type { Request } from 'express';import { OAuth2Client } from 'google-auth-library';import type { TokenPayload } from 'google-auth-library';import type { Config } from './config';const oauthClient = new OAuth2Client();export type AuthSuccess = {  ok: true;  subject: string;  claims: TokenPayload | null;};export type AuthFailure = {  ok: false;  status: number;  message: string;};export type AuthResult = AuthSuccess | AuthFailure;export const authenticateRequest = async (  req: Request,  config: Config,): Promise<AuthResult> => {  if (config.ingestApiKey) {    const key = req.get('x-api-key');    if (key && key === config.ingestApiKey) {      return { ok: true, subject: 'api-key', claims: null };    }  }  const authHeader = req.get('authorization');  if (authHeader?.startsWith('Bearer ')) {    const token = authHeader.slice('Bearer '.length).trim();    if (!config.allowedAudience) {      return {        ok: false,        status: 500,        message: 'allowed audience not configured',      };    }    try {      const ticket = await oauthClient.verifyIdToken({        idToken: token,        audience: config.allowedAudience,      });      const payload = ticket.getPayload();      const issuer = payload?.iss;      if (config.allowedIssuers.length > 0 && issuer && !config.allowedIssuers.includes(issuer)) {        return {          ok: false,          status: 403,          message: 'issuer not authorised',        };      }      const subject = payload?.sub ?? 'unknown';      return { ok: true, subject, claims: payload ?? null };    } catch (error) {      return {        ok: false,        status: 401,        message: error instanceof Error ? error.message : 'token verification failed',      };    }  }  if (config.ingestApiKey || config.allowedAudience) {    return {      ok: false,      status: 401,      message: 'authentication required',    };  }  return { ok: true, subject: 'anonymous', claims: null };};